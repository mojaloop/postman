{
	"info": {
		"_postman_id": "ec860df7-56f0-4789-8890-0129c59ee42c",
		"name": "Golden_Path_CGS_Mojaloop",
		"description": "Description: Golden Path Tests using Mojaloop Simulators",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "feature-tests",
			"item": [
				{
					"name": "settlement_management",
					"item": [
						{
							"name": "CGS  And Interchange Fee Settlements",
							"item": [
								{
									"name": "settlement || position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"    /*        pm.test(\"testfsp1 position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"    /*        pm.test(\"testfsp2 position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"    /*        pm.test(\"testfsp2 position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"    /*        pm.test(\"testfsp2 position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"payerfspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"payerfspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"     /*       pm.test(\"payerfsp position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"payeefspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"payeefspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"       /*     pm.test(\"payeefsp position account balance is 0\", function () {",
															"                pm.expect(curAccount.value).to.eql(0);",
															"            });*/",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "HUB balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {",
															"            pm.environment.set(\"hubReconciliationAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {",
															"            pm.environment.set(\"hubMultilateralAccountBalanceBeforeTransfer\", curAccount.value);",
															"        }",
															"    })",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"Hub",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Existing Open Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Close any window before transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "get initial position: testfsp1, testfsp2, testfsp3, testfsp4",
									"item": [
										{
											"name": "Get testfsp1 position before win1 transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData) {",
															"  if (jsonData[i].currency === pm.environment.get('currency')) {",
															"    pm.test(\"Atleast one account position should be returned\", function () {",
															"      pm.environment.set(\"testfsp1PositionBefore\", jsonData[i].value);",
															"      pm.expect(jsonData).to.be.not.empty;",
															"    });",
															"  }",
															"",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"positions"
													]
												},
												"description": "We will capture the initial position for Payeefsp before the transfer and will save this value in a variable  payeefspPositionBeforeTransferhp"
											},
											"response": []
										},
										{
											"name": "Get testfsp2  position before  win1 transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData) {",
															"  if (jsonData[i].currency === pm.environment.get('currency')) {",
															"    pm.test(\"Atleast one account position should be returned\", function () {",
															"      pm.environment.set(\"testfsp2PositionBefore\", jsonData[i].value);",
															"      pm.expect(jsonData).to.be.not.empty;",
															"    });",
															"  }",
															"",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"positions"
													]
												},
												"description": "We will capture the initial position for Payeefsp before the transfer and will save this value in a variable  payeefspPositionBeforeTransferhp"
											},
											"response": []
										},
										{
											"name": "Get testfsp3  position before win1 transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"",
															"for (var i in jsonData) {",
															"  if (jsonData[i].currency === pm.environment.get('currency')) {",
															"    pm.test(\"Atleast one account position should be returned\", function () {",
															"      pm.environment.set(\"testfsp3PositionBefore\", jsonData[i].value);",
															"      pm.expect(jsonData).to.be.not.empty;",
															"    });",
															"  }",
															"",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"positions"
													]
												},
												"description": "We will capture the initial position for Payerfsp before the transfer and will save this value in a variable  payerfspPositionBeforeTransferhp"
											},
											"response": []
										},
										{
											"name": "Get testfsp4 position before  win1 transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"",
															"for (var i in jsonData) {",
															"  if (jsonData[i].currency === pm.environment.get('currency')) {",
															"    pm.test(\"Atleast one account position should be returned\", function () {",
															"      pm.environment.set(\"testfsp4PositionBefore\", jsonData[i].value);",
															"      pm.expect(jsonData).to.be.not.empty;",
															"    });",
															"  }",
															"",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"positions"
													]
												},
												"description": "We will capture the initial position for Payerfsp before the transfer and will save this value in a variable  payerfspPositionBeforeTransferhp"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims]  transfers, positions CGS Window1 tests (OTC-649, OTC-645)",
									"item": [
										{
											"name": "testfsp1/accounts (settlement,...) balances BEFORE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettlementBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp1InterchFeeBalanceBefore\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp1 settlement balance before transfers',pm.environment.get(\"testfsp1SettlementBalanceBefore\"));",
															"",
															"console.log('extracted testfsp1 positions balance before transfers',pm.environment.get(\"testfsp1PositionBalanceBefore\"));",
															"",
															"console.log('extracted testfsp1 interchange fee balance before transfers',pm.environment.get(\"testfsp1InterchFeeBalanceBefore\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2/accounts (settlement,...) balances BEFORE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp2SettlementBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp2PositionBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp2InterchFeeBalanceBefore\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp2 settlement balance before transfers',pm.environment.get(\"testfsp2SettlementBalanceBefore\"));",
															"",
															"console.log('extracted testfsp2 positions balance before transfers',pm.environment.get(\"testfsp2PositionBalanceBefore\"));",
															"",
															"console.log('extracted testfsp2 interchange fee balance before transfers',pm.environment.get(\"testfsp2InterchFeeBalanceBefore\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3/accounts (settlement,...) balances BEFORE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp3SettlementBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp3PositionBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp3InterchFeeBalanceBefore\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp3 settlement balance before transfers',pm.environment.get(\"testfsp3SettlementBalanceBefore\"));",
															"",
															"console.log('extracted testfsp3 positions balance before transfers',pm.environment.get(\"testfsp3PositionBalanceBefore\"));",
															"",
															"console.log('extracted testfsp3 interchange fee balance before transfers',pm.environment.get(\"testfsp3InterchFeeBalanceBefore\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4/accounts (settlement,...) balances BEFORE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp4SettlementBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp4PositionBalanceBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp4InterchFeeBalanceBefore\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp4 settlement balance before transfers',pm.environment.get(\"testfsp4SettlementBalanceBefore\"));",
															"",
															"console.log('extracted testfsp4 positions balance before transfers',pm.environment.get(\"testfsp4PositionBalanceBefore\"));",
															"",
															"console.log('extracted testfsp4 interchange fee balance before transfers',pm.environment.get(\"testfsp4InterchFeeBalanceBefore\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfer testfsp3 to testfsp1 wallet-to-wallet"
											},
											"response": []
										},
										{
											"name": "[negative] POST /scenarios testfsp3  -> testfsp1 w2w SEND",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"result.statusCode == 400\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.statusCode).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "request that is supposed to fail; transfer without idType"
											},
											"response": []
										},
										{
											"name": "testfsp3/accounts (settlement, position) AFTER [15.00 TZS] transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp3SettlementBalanceAfterTransfer1\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp3PositionBalanceAfterTransfer1\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp3InterchFeeBalanceAfterTransfer1Transfer1\", curAccount.value);",
															"        }",
															"    })",
															"",
															"var transferAmount = 15;",
															"var testfsp3SettlementBalanceAfterExpected = Number.parseFloat(pm.environment.get(\"testfsp3SettlementBalanceBefore\")) - Number.parseFloat(transferAmount);",
															"",
															" testfsp3SettlementBalanceAfterExpected = testfsp3SettlementBalanceAfterExpected.toFixed(2);",
															"",
															"var testfsp3SettlementBalanceAfterActual = Number.parseFloat(pm.environment.get(\"testfsp3SettlementBalanceAfterTransfer1\")).toFixed(2);",
															"",
															"console.log('extracted testfsp3 settlement balance before transfers',pm.environment.get(\"testfsp3SettlementBalanceBefore\"));",
															"console.log('extracted testfsp3 settlement balance after first transfer ACTUAL',testfsp3SettlementBalanceAfterActual);",
															"console.log('calculated testfsp3 settlement balance before transfers '+pm.environment.get(\"testfsp3SettlementBalanceBefore\") +' transfer amount -'+transferAmount, testfsp3SettlementBalanceAfterExpected);",
															"",
															"console.log('test fsp3 positions account before',pm.environment.get(\"testfsp3PositionBalanceBefore\"));",
															"console.log('test fsp3 positions account after',pm.environment.get(\"testfsp3PositionBalanceAfterTransfer1\"));",
															"",
															"",
															"pm.test(\"Check that settlement account value changes by transfer amount \"+transferAmount, ",
															"    function () {",
															"            pm.expect(Number(testfsp3SettlementBalanceAfterExpected)).to.eql(Number(testfsp3SettlementBalanceAfterActual));",
															"        });",
															"pm.test(\"Check that position account value remains unchanged\", ",
															"function () {",
															"            pm.expect(Number(pm.environment.get(\"testfsp3PositionBalanceBefore\"))).to.eql(Number(pm.environment.get(\"testfsp3PositionBalanceAfterTransfer1\")));",
															"        });       ",
															"",
															"// check for interchage fee change",
															"console.log('test fsp1 interchange fee account value after transfer 1',pm.environment.get(\"testfsp3InterchFeeBalanceAfterTransfer1Transfer1\"));",
															" ",
															"var testfsp3_actual_interchange_transfer1 =  Number.parseFloat(pm.environment.get(\"testfsp3InterchFeeBalanceAfterTransfer1Transfer1\")) - Number.parseFloat(pm.environment.get(\"testfsp3InterchFeeBalanceBefore\"))",
															"testfsp3_actual_interchange_transfer1 = testfsp3_actual_interchange_transfer1.toFixed(2);",
															"var testfsp3_expected_interchange_transfer1 = 0.09; ",
															"",
															"pm.test(\"check that interchange fee have been changed by \"+testfsp3_expected_interchange_transfer1,",
															"function () {",
															"            pm.expect(Number(testfsp3_actual_interchange_transfer1)).to.eql(Number(testfsp3_expected_interchange_transfer1));",
															"        });  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												},
												"description": "account vals tests AFTER single transfer"
											},
											"response": []
										},
										{
											"name": "testfsp1/accounts (settlement, position) AFTER [15.00 TZS] transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettlementBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp1InterchFeeBalanceAfterTransfer1\", curAccount.value);",
															"        }",
															"    })",
															"",
															"var transferAmount = 15;",
															"var testfsp1SettlementBalanceAfterExpected = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceBefore\")) + Number.parseFloat(transferAmount);",
															"",
															" testfsp1SettlementBalanceAfterExpected = testfsp1SettlementBalanceAfterExpected.toFixed(2);",
															"",
															"var testfsp1SettlementBalanceAfterActual = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceAfter\")).toFixed(2);",
															"",
															"console.log('extracted testfsp1 settlement balance before transfers',pm.environment.get(\"testfsp1SettlementBalanceBefore\"));",
															"console.log('extracted testfsp1 settlement balance after transfers ACTUAL',pm.environment.get(\"testfsp1SettlementBalanceAfter\"));",
															"console.log('calculated testfsp1 settlement balance before transfers '+pm.environment.get(\"testfsp1SettlementBalanceBefore\") +' transfer amount +'+transferAmount, testfsp1SettlementBalanceAfterExpected);",
															"",
															"console.log('test fsp1 positions account before',pm.environment.get(\"testfsp1PositionBalanceBefore\"));",
															"console.log('test fsp1 positions account after',pm.environment.get(\"testfsp1PositionBalanceAfter\"));",
															"",
															"",
															"pm.test(\"Check that settlement account value changes by transfer amount \"+transferAmount, ",
															"    function () {",
															"            pm.expect(Number(testfsp1SettlementBalanceAfterExpected)).to.eql(Number(testfsp1SettlementBalanceAfterActual));",
															"        });",
															"pm.test(\"Check that position account value remains unchanged\", ",
															"function () {",
															"            pm.expect(Number(pm.environment.get(\"testfsp1PositionBalanceBefore\"))).to.eql(Number(pm.environment.get(\"testfsp1PositionBalanceAfter\")));",
															"        });       ",
															"",
															"// check for interchage fee change",
															"console.log('test fsp1 interchange fee account value after transfer 1',pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer1\"));",
															" ",
															"var testfsp1_actual_interchange_transfer1 =  Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer1\")) - Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceBefore\"))",
															"testfsp1_actual_interchange_transfer1 = testfsp1_actual_interchange_transfer1.toFixed(2);",
															"var testfsp1_expected_interchange_transfer1 = -0.09; ",
															"",
															"pm.test(\"check that interchange fee have been changed by \"+testfsp1_expected_interchange_transfer1,",
															"function () {",
															"            pm.expect(Number(testfsp1_actual_interchange_transfer1)).to.eql(Number(testfsp1_expected_interchange_transfer1));",
															"        });  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												},
												"description": "account vals tests AFTER single transfer"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2BankFname testfsp2Bankname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp2bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp1bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"87.88\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "testfsp2/accounts (settlement) after b2b transfer [87.88 TZS]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp2SettlementBalanceAfterB2B\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp2PositionBalanceAfterB2B\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp2InterchFeeBalanceAfterB2B\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp2 settlement balance after B2B transfer',pm.environment.get(\"testfsp2SettlementBalanceAfterB2B\"));",
															"",
															"console.log('extracted testfsp2 positions balance after B2B transfer',pm.environment.get(\"testfsp2PositionBalanceAfterB2B\"));",
															"",
															"",
															"// check for interchage fee change",
															"",
															"console.log('extracted testfsp2 interchange fee  balance after B2B transfer',pm.environment.get(\"testfsp2InterchFeeBalanceAfterB2B\"));",
															" ",
															"var testfsp2_actual_interchange_B2B =  Number.parseFloat(pm.environment.get(\"testfsp2InterchFeeBalanceAfterB2B\")) - Number.parseFloat(pm.environment.get(\"testfsp2InterchFeeBalanceBefore\"))",
															"testfsp2_actual_interchange_B2B = testfsp2_actual_interchange_B2B.toFixed(2);",
															"var testfsp2_expected_interchange_b2b = 0.00; ",
															"",
															"pm.test(\"check that interchange fee have been changed by \"+testfsp2_expected_interchange_b2b,",
															"function () {",
															"            pm.expect(Number(testfsp2_actual_interchange_B2B)).to.eql(Number(testfsp2_expected_interchange_b2b));",
															"        });  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1/accounts (settlement, position) after b2b transfer [87.88 TZS]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettlementBalanceAfterB2B\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionBalanceAfterB2B\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp1InterchFeeBalanceAfterB2B\", curAccount.value);",
															"        }",
															"    })",
															"    ",
															"console.log('extracted testfsp1 settlement balance after B2B transfer',pm.environment.get(\"testfsp1SettlementBalanceAfterB2B\"));",
															"",
															"console.log('extracted testfsp1 positions balance after B2B transfer',pm.environment.get(\"testfsp1PositionBalanceAfterB2B\"));",
															"",
															"// check for interchage fee change",
															"console.log('extracted testfsp1 interchange fee  balance after B2B transfer',pm.environment.get(\"testfsp1InterchFeeBalanceAfterB2B\"));",
															" ",
															"var testfsp1_actual_interchange_b2b_transfer =  Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfterB2B\")) - Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer1\"))",
															"testfsp1_actual_interchange_b2b_transfer = testfsp1_actual_interchange_b2b_transfer.toFixed(2);",
															"var testfsp1_expected_interchange_b2b = 0.00; ",
															"",
															"pm.test(\"check that interchange fee have been changed by \"+testfsp1_expected_interchange_b2b,",
															"function () {",
															"            pm.expect(Number(testfsp1_actual_interchange_b2b_transfer)).to.eql(Number(testfsp1_expected_interchange_b2b));",
															"        });  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												},
												"description": "accounts values after bank-to-bank transfer"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1Fname testfsp1Lname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"158.36\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp1 -> to testfsp4 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "testfsp1/accounts (settlement, position) after  [158.36 TZS] w2w transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettlementBalanceAfterTransfer2\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionBalanceAfterTransfer2\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp1InterchFeeBalanceAfterTransfer2\", curAccount.value);",
															"        }",
															"    })",
															"",
															"var transferAmount = 158.36;",
															"var testfsp1SettlementBalanceAfterExpected = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceAfterB2B\")) - Number.parseFloat(transferAmount);",
															"",
															" testfsp1SettlementBalanceAfterExpected = testfsp1SettlementBalanceAfterExpected.toFixed(2);",
															"",
															"var testfsp1SettlementBalanceAfterActual = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceAfterTransfer2\")).toFixed(2);",
															"",
															"console.log('extracted testfsp1 settlement balance before second transfer',pm.environment.get(\"testfsp1SettlementBalanceAfter\"));",
															"console.log('extracted testfsp1 settlement balance after transfers ACTUAL',pm.environment.get(\"testfsp1SettlementBalanceAfterTransfer2\"));",
															"console.log('calculated testfsp1 settlement balance after second transfer '+pm.environment.get(\"testfsp1SettlementBalanceAfter\") +' transfer amount -'+transferAmount, testfsp1SettlementBalanceAfterExpected);",
															"",
															"console.log('test fsp1 positions account before 2nd transfer',pm.environment.get(\"testfsp1PositionBalanceAfter\"));",
															"console.log('test fsp1 positions account after 2nd transfer',pm.environment.get(\"testfsp1PositionBalanceAfterTransfer2\"));",
															"",
															"",
															"pm.test(\"Check that settlement account value changes by transfer amount -\"+transferAmount, ",
															"    function () {",
															"            pm.expect(Number(testfsp1SettlementBalanceAfterExpected)).to.eql(Number(testfsp1SettlementBalanceAfterActual));",
															"        });",
															"pm.test(\"Check that position account value remains unchanged\", ",
															"function () {",
															"            pm.expect(Number(pm.environment.get(\"testfsp1PositionBalanceAfter\"))).to.eql(Number(pm.environment.get(\"testfsp1PositionBalanceAfterTransfer2\")));",
															"        });       ",
															"",
															"// check for interchage fee change",
															"console.log('test fsp1 interchange fee account value after transfer 2',pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer2\"));",
															" ",
															"var testfsp1_actual_interchange_transfer2 =  Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer2\")) - Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfterTransfer1\"))",
															"testfsp1_actual_interchange_transfer2 = testfsp1_actual_interchange_transfer2.toFixed(2);",
															"var testfsp1_expected_interchange_transfer2 = 0.95; ",
															"",
															"pm.test(\"check that interchange fee have been changed by \"+testfsp1_expected_interchange_transfer2,",
															"function () {",
															"            pm.expect(Number(testfsp1_actual_interchange_transfer2)).to.eql(Number(testfsp1_expected_interchange_transfer2));",
															"        });  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												},
												"description": "getting account values"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"14.21\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp4WalletFname testfsp4WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"150\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"extracting window in open state\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															" });",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get testfsp1 position AFTER transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"// var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp1PositionBefore\")) - Number.parseFloat(15) + Number.parseFloat(158.36) - Number.parseFloat(87.88) - Number.parseFloat(211.15) - Number.parseFloat(14.21) - Number.parseFloat(150);",
															"",
															"var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp1PositionBefore\"));",
															"//expectedamount = expectedamount.toFixed(2);",
															"",
															"for (var i in jsonData) {",
															"    if (jsonData[i].currency === pm.environment.get('currency')) {",
															"        pm.test(\"Position value should be the same after transfer\", function () {",
															"            pm.expect(Number(jsonData[i].value)).to.eql(Number(expectedamount));",
															"        });",
															"    }",
															"",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"positions"
													]
												},
												"description": "check that position changed by sum of aggregates of transfers from window1."
											},
											"response": []
										},
										{
											"name": "Get testfsp2 position AFTER transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"// var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp2PositionBefore\")) + Number.parseFloat(87.88) + Number.parseFloat(211.15) + Number.parseFloat(14.21);",
															"var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp2PositionBefore\"));",
															"// expectedamount = expectedamount.toFixed(2);",
															"console.log(expectedamount);",
															"",
															"",
															"for (var i in jsonData) {",
															"    if (jsonData[i].currency === pm.environment.get('currency')) {",
															"       pm.test(\"Position value should be the same after transfer\", function () {",
															"            pm.expect(jsonData[i].value).to.eql(Number(expectedamount));",
															"        });",
															"    }",
															"",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"positions"
													]
												},
												"description": "check that position changed by sum of aggregates of transfers from window1."
											},
											"response": []
										},
										{
											"name": "Get testfsp3 position AFTER transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"// var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp3PositionBefore\")) + Number.parseFloat(15);",
															"var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp3PositionBefore\"));",
															"// expectedamount = expectedamount.toFixed(2);",
															"console.log(expectedamount);",
															"",
															"",
															"for (var i in jsonData) {",
															"    if (jsonData[i].currency === pm.environment.get('currency')) {",
															"       pm.test(\"Position value should be the same after transfer\", function () {",
															"            pm.expect(jsonData[i].value).to.eql(Number(expectedamount));",
															"        });",
															"    }",
															"",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"positions"
													]
												},
												"description": "check that position changed by sum of aggregates of transfers from window1."
											},
											"response": []
										},
										{
											"name": "Get testfsp4 position AFTER transfers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"// var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp4PositionBefore\")) + Number.parseFloat(150) - Number.parseFloat(158.36);",
															"var expectedamount = Number.parseFloat(pm.environment.get(\"testfsp4PositionBefore\"));",
															"// expectedamount = expectedamount.toFixed(2);",
															"console.log(expectedamount);",
															"",
															"",
															"for (var i in jsonData) {",
															"    if (jsonData[i].currency === pm.environment.get('currency')) {",
															"       pm.test(\"Position value should be the same after transfer\", function () {",
															"            pm.expect(jsonData[i].value).to.eql(Number(expectedamount));",
															"        });",
															"    }",
															"",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "hub_operator"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/positions",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"positions"
													]
												},
												"description": "check that position changed by sum of aggregates of transfers from window1."
											},
											"response": []
										},
										{
											"name": "testfsp1 (settlement) accounts vals AFTER",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp1SettlementBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp1PositionBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp1InterchFeeBalanceAfter\", curAccount.value);",
															"        }",
															"    })",
															"     ",
															"// settlement account balance verification (testfsp1)    ",
															"var testfsp1SettlementBalanceAfterExpected = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceBefore\")) + Number.parseFloat(15) - Number.parseFloat(158.36) + Number.parseFloat(87.88) + Number.parseFloat(211.15) + Number.parseFloat(14.21) + Number.parseFloat(150);",
															"testfsp1SettlementBalanceAfterExpected = testfsp1SettlementBalanceAfterExpected.toFixed(2);",
															"",
															"//@TODO adjust rounding balance (2 decimals || 3 decimals after the point).",
															"var testfsp1SettlementBalanceAfterActual = Number.parseFloat(pm.environment.get(\"testfsp1SettlementBalanceAfter\")).toFixed(2);",
															"",
															"console.log('extracted testfsp1 settlement balance before transfers',pm.environment.get(\"testfsp1SettlementBalanceBefore\"));",
															"console.log('extracted testfsp1 settlement balance after transfers ACTUAL',pm.environment.get(\"testfsp1SettlementBalanceAfter\"));",
															"console.log('extracted testfsp1 settlement balance after transfers EXPECTED',testfsp1SettlementBalanceAfterExpected);",
															"",
															"console.log('test fsp1 interchange fee balance before',pm.environment.get(\"testfsp1InterchFeeBalanceBefore\"));",
															"console.log('test fsp1 interchange fee balance after',pm.environment.get(\"testfsp1InterchFeeBalanceAfter\"));",
															"",
															"pm.test(\"Check that settlement account value changed after transfers\", ",
															"    function () {",
															"            pm.expect(Number(testfsp1SettlementBalanceAfterExpected)).to.eql(Number(testfsp1SettlementBalanceAfterActual));",
															"        });",
															"",
															"// interchange_fee changes verification (testfsp1)",
															"var aggregates_fee = Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceAfter\")) - Number.parseFloat(pm.environment.get(\"testfsp1InterchFeeBalanceBefore\"));",
															"aggregates_fee = aggregates_fee.toFixed(2);",
															"",
															"var testfsp1_aggregate_interchange_fee_expected = -1.40;",
															"",
															"testfsp1_aggregate_interchange_fee_expected = Number.parseFloat(testfsp1_aggregate_interchange_fee_expected).toFixed(2);",
															"",
															"pm.test(\"check agregates for interchange fees calculated correctly\", ",
															"        function () {",
															"                pm.expect(aggregates_fee).to.eql(testfsp1_aggregate_interchange_fee_expected);",
															"        });",
															"   "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 (settlement) accounts vals AFTER",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp2SettlementBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp2PositionBalanceAfter\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
															"            pm.environment.set(\"testfsp2InterchFeeBalanceAfter\", curAccount.value);",
															"        }",
															"    })",
															"     ",
															"",
															"var testfsp2SettlementBalanceAfterExpected = Number.parseFloat(pm.environment.get(\"testfsp2SettlementBalanceBefore\")) + Number.parseFloat(87.88) + Number.parseFloat(211.15) + Number.parseFloat(14.21);",
															"// testfsp2SettlementBalanceAfterExpected = testfsp2SettlementBalanceAfterExpected.toFixed(2);",
															"",
															"var testfsp2SettlementBalanceAfterActual = Number.parseFloat(pm.environment.get(\"testfsp2SettlementBalanceAfter\"));",
															"",
															"console.log('extracted testfsp2 settlement balance before transfers',pm.environment.get(\"testfsp2SettlementBalanceBefore\"));",
															"console.log('extracted testfsp2 settlement balance after transfers ACTUAL',pm.environment.get(\"testfsp2SettlementBalanceAfter\"));",
															"",
															"console.log('testfsp2 settlement balance after transfers EXPECTED',testfsp2SettlementBalanceAfterExpected);",
															"",
															"console.log('test fsp2 interchange fee balance before',pm.environment.get(\"testfsp2InterchFeeBalanceBefore\"));",
															"console.log('test fsp2 interchange fee balance after',pm.environment.get(\"testfsp2InterchFeeBalanceAfter\"));",
															"",
															"",
															"        // pm.test(\"Check that settlement account value changed after transfers\", function () {",
															"        //     pm.expect(Number(testfsp1SettlementBalanceAfterExpected)).to.eql(Number(testfsp1SettlementBalanceAfterActual));",
															"        // });",
															"",
															"var aggregates_fee = Number.parseFloat(pm.environment.get(\"testfsp2InterchFeeBalanceAfter\"))-Number.parseFloat(pm.environment.get(\"testfsp2InterchFeeBalanceBefore\"));",
															"aggregates_fee = aggregates_fee.toFixed(2);",
															"",
															"pm.test(\"check agregates for interchange fees calculated correctly\", function () {",
															"            pm.expect(aggregates_fee).to.eql(Number.parseFloat(1.36).toFixed(2));",
															"        });",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 (settlement) accounts vals AFTER",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"/*",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp3SettlementBalanceValueBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"",
															"        }",
															"    })",
															"",
															"    ",
															"console.log('extracted testfsp3 settlement balannce before transfers',pm.environment.get(\"testfsp3SettlementBalanceValueBefore\"));",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 (settlement) accounts vals AFTER",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"/*",
															"var jsonData = pm.response.json();",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            pm.environment.set(\"testfsp3SettlementBalanceValueBefore\", curAccount.value);",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", curAccount.value);",
															"",
															"        }",
															"    })",
															"",
															"    ",
															"console.log('extracted testfsp3 settlement balannce before transfers',pm.environment.get(\"testfsp3SettlementBalanceValueBefore\"));",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Interchange-Fee Settlement for a single Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"InterchangeFee\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n  \t{\n  \t\t\"id\":{{openWindowID}}\n  \t}\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Close any window before transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims] new transfers window1",
									"item": [
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfer testfsp3 to testfsp1 wallet-to-wallet"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1Fname testfsp1Lname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"158.36\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp1 -> to testfsp4 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2BankFname testfsp2Bankname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp2bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp1bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"87.88\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet 2020-06-26 11:52AM\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"14.21\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp4WalletFname testfsp4WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"150\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (bank-to-bank)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Close window1",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims] new transfers window2",
									"item": [
										{
											"name": "POST /scenarios testfsp3  -> testfsp4 w2w SEND [45.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"45\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfer testfsp3 to testfsp4 wallet-to-wallet"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp4  -> testfsp2 w2w SEND [34.55 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp4WalletFname testfsp4WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"34.55\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp4 -> to testfsp2 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp2 b2b SEND [22.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3BankFname testfsp3Bankname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp3bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp2bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"22\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [788.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"788\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp2, wallet-to-wallet SEND {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [22.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"22\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [333.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"333\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Close window2",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims] new transfers window3",
									"item": [
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [56.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"56\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfer testfsp3 to testfsp4 wallet-to-wallet"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [44.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"44\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp4 -> to testfsp2 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp2 b2b SEND [89.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1BankFname testfsp1BankLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp1bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp2bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"89\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [99.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp4WalletFname testfsp4WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"99\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp2, wallet-to-wallet SEND {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"14.21\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [110.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"110\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Close window3",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims] new transfers window4",
									"item": [
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfer testfsp3 to testfsp4 wallet-to-wallet"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1 -> testfsp2 w2w SEND [158.36 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1Fname testfsp1Lname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"158.36\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp4 -> to testfsp2 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp4 b2b SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1BankFname testfsp1BankLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp1bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp4bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp2 w2w SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1Fname testfsp1Lname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp2, wallet-to-wallet SEND {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"14.21\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [150.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"150\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Close window4",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[new sims] new transfers window5",
									"item": [
										{
											"name": "POST /scenarios testfsp2  -> testfsp3 w2w SEND [15.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [158.36 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp4WalletFname testfsp4WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"158.36\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp4 -> to testfsp2 wallet-to-wallet extension type"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp1  -> testfsp3 b2b SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp1BankFname testfsp1BankLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp1bankMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Bank\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestfsp3bankMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP1_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP1_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (bank-to-bank)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [211.15 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"211.15\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp2, wallet-to-wallet SEND {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp2 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp3}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp3WalletFname testfsp3WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp3MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp1MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"14.21\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp3 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP3_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP3_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp3 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										},
										{
											"name": "POST /scenarios testfsp2  -> testfsp4 w2w RECEIVE [150.00 TZS]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//date for transfer note (dynamically generated)",
															"const dateNow= new Date();",
															"pm.environment.set('currentDate', dateNow.toISOString());",
															"postman.setGlobalVariable(\"currentDate2\", dateNow.toLocaleDateString());",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"//pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"//pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"//pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"transfer state is completed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp2}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp4}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"testfsp2WalletFname testfsp2WalletLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp2MSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{testfsp4MSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"150\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"from testfsp2 to testfsp1, wallet-to-wallet RECEIVE {{currentDate}}\",\n            \"homeTransactionId\": \"123ABCfdafar353533\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{TESTFSP2_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{TESTFSP2_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending transfers from testfsp2 to testfsp1 (wallet-to-wallet)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Close window5",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Create Settlement for previously  closed 4 windows",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    pm.environment.set(\"closed_win_prev_prev_prev_prev_prev\", Number(jsonData[0].settlementWindowId)-5); ",
															"    pm.environment.set(\"closed_win_prev_prev_prev_prev\", Number(jsonData[0].settlementWindowId)-4);  ",
															"    pm.environment.set(\"closed_win_prev_prev_prev\", Number(jsonData[0].settlementWindowId)-3);  ",
															"    pm.environment.set(\"closed_win_prev_prev\", Number(jsonData[0].settlementWindowId)-2);",
															"    pm.environment.set(\"closed_win_prev\", Number(jsonData[0].settlementWindowId)-1);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"    console.log('closed window prev prev',pm.environment.get(\"closed_win_prev_prev\"))",
															"    console.log('closed window prev',pm.environment.get(\"closed_win_prev\"))",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "hub_operator",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for all 5 Closed Windows (INTERCHANGE FEE)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"first participant netSettlementAmount == -5.37 TZS\", function () {",
															"    pm.expect(jsonData.participants[0].accounts[0].netSettlementAmount.amount).to.eql(-5.37);",
															"});",
															"",
															"pm.test(\"second participant netSettlementAmount == -2.26 TZS\", function () {",
															"    pm.expect(jsonData.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-2.26);",
															"});",
															"",
															"pm.test(\"third participant netSettlementAmount == 7.10 TZS\", function () {",
															"    pm.expect(jsonData.participants[2].accounts[0].netSettlementAmount.amount).to.eql(7.10);",
															"});",
															"",
															"pm.test(\"fourth participant netSettlementAmount == 0.53 TZS\", function () {",
															"    pm.expect(jsonData.participants[3].accounts[0].netSettlementAmount.amount).to.eql(0.53);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"InterchangeFee\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n  \t{\n  \t\t\"id\":{{closed_win_prev_prev_prev_prev_prev}}\n  \t},\n  \t{\n  \t\t\"id\":{{closed_win_prev_prev_prev_prev}}\n  \t},\n    {\n      \"id\": {{closed_win_prev_prev_prev}}\n    },\n    {\n      \"id\": {{closed_win_prev_prev}}\n    },\n    {\n      \"id\": {{closed_win_prev}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "negative requests",
									"item": [
										{
											"name": "NEGATIVE Create Settlement for all Windows Second time",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response contains 'Generic validation error'\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Generic validation error\");",
															"});",
															"pm.test(\"errorCode == 3100\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"InterchangeFee\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closed_win_prev_prev_prev}}\n    },\n        {\n      \"id\": {{closed_win_prev_prev}}\n    },\n        {\n      \"id\": {{closed_win_prev}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										},
										{
											"name": "NEGATIVE POST /scenarios payerfsp -> NON-registered fsp party",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
															"",
															"//pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"",
															"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
															"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
															"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"party not found with result.statusCode==3204 && lastError.httpStatusCOde==500\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.scenario1.result.transferState.currentState).to.eql(\"ERROR_OCCURRED\");",
															"    pm.expect(jsonData.scenario1.result.transferState.lastError.httpStatusCode).to.eql(500);",
															"    pm.expect(jsonData.scenario1.result.transferState.lastError.mojaloopError.errorInformation.errorDescription).to.eql(\"Party not found\");",
															"    pm.expect(jsonData.scenario1.result.statusCode).to.eql(\"3204\");",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"disabled": true
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}",
														"disabled": true
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{testfsp1}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"payerfspFname payerfspLname\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payerfspMSISDN}}\",\n                \"extensionList\":\n                [{\"key\":\"accountType\", \n                \"value\":\"Wallet\"}\n                ]\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{settlementtestNonExistingMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment 2020-06-10 11:02pm\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
												},
												"url": {
													"raw": "{{PAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
													"host": [
														"{{PAYERFSP_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"scenarios"
													]
												},
												"description": "sending payment to non registered anywhere FSP party."
											},
											"response": []
										}
									]
								},
								{
									"name": "Add Users to new Sims ; ALS registration (random MSISDN)",
									"item": [
										{
											"name": "GET TESTFSP4FSP/repository/parties  before sim and ALS registration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,200, 500]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/repository/parties",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"repository",
														"parties"
													]
												},
												"description": "Get parties from testfsp2  service."
											},
											"response": [
												{
													"name": "An error occured processing the request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The party was created",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "[testfsp4, Wallet] POST /parties  {{testfsp4MSISDN}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"RandomNumberMsisdnW2W\", _.random(111111111111,999999999999));",
															"console.log('randomg MSISDN generated for registration of wallet extension type',pm.environment.get(\"RandomNumberMsisdnW2W\"));",
															"",
															"const moment = require('moment');",
															"pm.environment.set(\"dateOfBirthGenerated\", moment().format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"fnameW2WGenerated\",\"fsp4WalletFname{{$timestamp}}\");",
															"pm.environment.set(\"lnameW2WGenerated\",\"fsp4WalletLname{{$timestamp}}\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,200, 500]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"{{fnameW2WGenerated}} {{lnameW2WGenerated}}\",\n    \"firstName\": \"{{fnameW2WGenerated}}\",\n    \"middleName\": \"\",\n    \"lastName\": \"{{lnameW2WGenerated}}\",\n    \"dateOfBirth\": \"{{dateOfBirthGenerated}}\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": {{RandomNumberMsisdnW2W}},\n    \"extensionList\": [\n    \t{\"key\": \"accountType\", \"value\": \"Wallet\"}\n    \t]\n}"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/repository/parties",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"repository",
														"parties"
													]
												},
												"description": "accoutType : Wallet"
											},
											"response": [
												{
													"name": "The party was created",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "An error occured processing the request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "[testfsp4, Wallet] POST /ALS_host/participants {{testfsp4MSISDN}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.participants+json;version=1.0"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"fspId\": \"{{testfsp4}}\",\n \"currency\": \"{{currency}}\"\n}\n"
												},
												"url": {
													"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{RandomNumberMsisdnW2W}}",
													"host": [
														"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
													],
													"path": [
														"participants",
														"MSISDN",
														"{{RandomNumberMsisdnW2W}}"
													]
												},
												"description": "ALS- register bank account type"
											},
											"response": []
										},
										{
											"name": "[testfsp4, Bank] POST /parties  {{settlementtestfsp4bankMSISDN}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"RandomNumberMsisdnB2B\", _.random(111111111111,999999999999));",
															"console.log('randomg MSISDN generated for registration of bank extension type',pm.environment.get(\"RandomNumberMsisdnB2B\"));",
															"",
															"const moment = require('moment');",
															"pm.environment.set(\"dateOfBirthGenerated\", moment().format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"fnameB2BGenerated\",\"fsp4BankFname{{$timestamp}}\");",
															"pm.environment.set(\"lnameB2BGenerated\",\"fsp4BankLname{{$timestamp}}\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,200, 500]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"{{fnameB2BGenerated}} {{lnameB2BGenerated}}\",\n    \"firstName\": \"{{fnameB2BGenerated}}\",\n    \"middleName\": \"\",\n    \"lastName\": \"{{lnameB2BGenerated}}\",\n    \"dateOfBirth\": \"{{dateOfBirthGenerated}}\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": {{RandomNumberMsisdnB2B}},\n    \"extensionList\": [\n    \t{\"key\": \"accountType\", \"value\": \"Bank\"}\n    \t]\n}"
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/repository/parties",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"repository",
														"parties"
													]
												},
												"description": "accoutType : Wallet"
											},
											"response": [
												{
													"name": "The party was created",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "An error occured processing the request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "[testfsp4, Bank] POST /ALS_host/participants {{RandomNumberMsisdnB2B}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.participants+json;version=1.0"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{testfsp4}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"fspId\": \"{{testfsp4}}\",\n \"currency\": \"{{currency}}\"\n}\n"
												},
												"url": {
													"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{RandomNumberMsisdnB2B}}",
													"host": [
														"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
													],
													"path": [
														"participants",
														"MSISDN",
														"{{RandomNumberMsisdnB2B}}"
													]
												},
												"description": "ALS- register bank account type"
											},
											"response": []
										},
										{
											"name": "GET TESTFSP4FSP/repository/parties    after registration sim and ALS",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([204,200, 500]);",
															"});",
															"",
															"pm.test(\"Response contains MSISDNs of just registered user with Wallet extension \"+pm.environment.get(\"RandomNumberMsisdnW2W\"), function () {",
															"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"RandomNumberMsisdnW2W\"));",
															"});",
															"",
															"pm.test(\"Response contains MSISDNs of just registered user with Bank extension \"+pm.environment.get(\"RandomNumberMsisdnB2B\"), function () {",
															"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"RandomNumberMsisdnB2B\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{TESTFSP4_BACKEND_TESTAPI_URL}}/repository/parties",
													"host": [
														"{{TESTFSP4_BACKEND_TESTAPI_URL}}"
													],
													"path": [
														"repository",
														"parties"
													]
												},
												"description": "Get parties from testfsp2  service."
											},
											"response": [
												{
													"name": "The party was created",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "An error occured processing the request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/repository/parties",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"repository",
																"parties"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "Text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get('WS02_OAUTH_ENABLED') === 'true') {",
					"",
					"    // Get Token for Hub Operator",
					"    let authHeader = btoa(`${pm.environment.get('HUB_OPERATOR_CONSUMER_KEY')}:${pm.environment.get('HUB_OPERATOR_CONSUMER_SECRET')}`);",
					"    let getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('HUB_OPERATOR_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payerfsp",
					"    authHeader = btoa(`${pm.environment.get('PAYERFSP_CONSUMER_KEY')}:${pm.environment.get('PAYERFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYERFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payeefsp",
					"    authHeader = btoa(`${pm.environment.get('PAYEEFSP_CONSUMER_KEY')}:${pm.environment.get('PAYEEFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYEEFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp1",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP1_CONSUMER_KEY')}:${pm.environment.get('TESTFSP1_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP1_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp2",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP2_CONSUMER_KEY')}:${pm.environment.get('TESTFSP2_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP2_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp3",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP3_CONSUMER_KEY')}:${pm.environment.get('TESTFSP3_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP3_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp4",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP4_CONSUMER_KEY')}:${pm.environment.get('TESTFSP4_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP4_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for NoResponsePayeeFSP",
					"    authHeader = btoa(`${pm.environment.get('NORESPONSEPAYEEFSP_CONSUMER_KEY')}:${pm.environment.get('NORESPONSEPAYEEFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('NORESPONSEPAYEEFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"}",
					"",
					"if(!pm.environment.get('jrsassign')) {",
					"    pm.sendRequest('http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js', function (err, response) {",
					"        pm.environment.set('jrsassign', response.text());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}